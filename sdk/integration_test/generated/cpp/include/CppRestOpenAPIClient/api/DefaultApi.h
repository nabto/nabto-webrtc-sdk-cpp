/**
 * Elysia Documentation
 * Development documentation
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DefaultApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/Object.h"
#include "CppRestOpenAPIClient/model/PostTestClientByTestIdSend_device_error_request.h"
#include "CppRestOpenAPIClient/model/PostTestClientByTestIdSend_device_messages_request.h"
#include "CppRestOpenAPIClient/model/PostTestClientByTestIdWait_for_device_messages_200_response.h"
#include "CppRestOpenAPIClient/model/PostTestClientByTestIdWait_for_device_messages_request.h"
#include "CppRestOpenAPIClient/model/PostTestClient_200_response.h"
#include "CppRestOpenAPIClient/model/PostTestClient_request.h"
#include "CppRestOpenAPIClient/model/PostTestDeviceByTestIdClientsByClientIdWait_for_error_request.h"
#include "CppRestOpenAPIClient/model/PostTestDeviceByTestIdClients_200_response.h"
#include "CppRestOpenAPIClient/model/PostTestDevice_200_response.h"
#include "CppRestOpenAPIClient/model/PostTestDevice_request.h"
#include "CppRestOpenAPIClient/model/PostV1ClientConnect_200_response.h"
#include "CppRestOpenAPIClient/model/PostV1ClientConnect_400_response.h"
#include "CppRestOpenAPIClient/model/PostV1ClientConnect_request.h"
#include "CppRestOpenAPIClient/model/PostV1DeviceConnect_200_response.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  DefaultApi 
{
public:

    explicit DefaultApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DefaultApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    pplx::task<std::shared_ptr<Object>> deleteTestClientByTestId(
        utility::string_t testId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    pplx::task<std::shared_ptr<Object>> deleteTestDeviceByTestId(
        utility::string_t testId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="postTestClientRequest"></param>
    pplx::task<std::shared_ptr<PostTestClient_200_response>> postTestClient(
        std::shared_ptr<PostTestClient_request> postTestClientRequest
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    pplx::task<std::shared_ptr<Object>> postTestClientByTestIdConnectDevice(
        utility::string_t testId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    pplx::task<std::shared_ptr<Object>> postTestClientByTestIdDisconnectClient(
        utility::string_t testId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    pplx::task<std::shared_ptr<Object>> postTestClientByTestIdDisconnectDevice(
        utility::string_t testId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    pplx::task<std::shared_ptr<Object>> postTestClientByTestIdDropClientMessages(
        utility::string_t testId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    pplx::task<std::shared_ptr<Object>> postTestClientByTestIdDropDeviceMessages(
        utility::string_t testId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    /// <param name="postTestClientByTestIdSendDeviceErrorRequest"></param>
    pplx::task<std::shared_ptr<Object>> postTestClientByTestIdSendDeviceError(
        utility::string_t testId,
        std::shared_ptr<PostTestClientByTestIdSend_device_error_request> postTestClientByTestIdSendDeviceErrorRequest
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    /// <param name="postTestClientByTestIdSendDeviceMessagesRequest"></param>
    pplx::task<std::shared_ptr<Object>> postTestClientByTestIdSendDeviceMessages(
        utility::string_t testId,
        std::shared_ptr<PostTestClientByTestIdSend_device_messages_request> postTestClientByTestIdSendDeviceMessagesRequest
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    /// <param name="body"></param>
    pplx::task<std::shared_ptr<Object>> postTestClientByTestIdSendNewMessageType(
        utility::string_t testId,
        std::shared_ptr<Object> body
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    /// <param name="postTestClientByTestIdWaitForDeviceMessagesRequest"></param>
    pplx::task<std::shared_ptr<PostTestClientByTestIdWait_for_device_messages_200_response>> postTestClientByTestIdWaitForDeviceMessages(
        utility::string_t testId,
        std::shared_ptr<PostTestClientByTestIdWait_for_device_messages_request> postTestClientByTestIdWaitForDeviceMessagesRequest
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="postTestDeviceRequest"></param>
    pplx::task<std::shared_ptr<PostTestDevice_200_response>> postTestDevice(
        std::shared_ptr<PostTestDevice_request> postTestDeviceRequest
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    pplx::task<std::shared_ptr<PostTestDeviceByTestIdClients_200_response>> postTestDeviceByTestIdClients(
        utility::string_t testId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    /// <param name="clientId"></param>
    pplx::task<std::shared_ptr<Object>> postTestDeviceByTestIdClientsByClientIdConnect(
        utility::string_t testId,
        utility::string_t clientId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    /// <param name="clientId"></param>
    pplx::task<std::shared_ptr<Object>> postTestDeviceByTestIdClientsByClientIdDisconnect(
        utility::string_t testId,
        utility::string_t clientId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    /// <param name="clientId"></param>
    pplx::task<std::shared_ptr<Object>> postTestDeviceByTestIdClientsByClientIdDropClientMessages(
        utility::string_t testId,
        utility::string_t clientId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    /// <param name="clientId"></param>
    /// <param name="postTestClientByTestIdSendDeviceErrorRequest"></param>
    pplx::task<std::shared_ptr<Object>> postTestDeviceByTestIdClientsByClientIdSendError(
        utility::string_t testId,
        utility::string_t clientId,
        std::shared_ptr<PostTestClientByTestIdSend_device_error_request> postTestClientByTestIdSendDeviceErrorRequest
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    /// <param name="clientId"></param>
    /// <param name="postTestClientByTestIdSendDeviceMessagesRequest"></param>
    pplx::task<std::shared_ptr<Object>> postTestDeviceByTestIdClientsByClientIdSendMessages(
        utility::string_t testId,
        utility::string_t clientId,
        std::shared_ptr<PostTestClientByTestIdSend_device_messages_request> postTestClientByTestIdSendDeviceMessagesRequest
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    /// <param name="clientId"></param>
    /// <param name="postTestDeviceByTestIdClientsByClientIdWaitForErrorRequest"></param>
    pplx::task<std::shared_ptr<PostTestClientByTestIdSend_device_error_request>> postTestDeviceByTestIdClientsByClientIdWaitForError(
        utility::string_t testId,
        utility::string_t clientId,
        std::shared_ptr<PostTestDeviceByTestIdClientsByClientIdWait_for_error_request> postTestDeviceByTestIdClientsByClientIdWaitForErrorRequest
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    /// <param name="clientId"></param>
    /// <param name="postTestClientByTestIdWaitForDeviceMessagesRequest"></param>
    pplx::task<std::shared_ptr<PostTestClientByTestIdWait_for_device_messages_200_response>> postTestDeviceByTestIdClientsByClientIdWaitForMessages(
        utility::string_t testId,
        utility::string_t clientId,
        std::shared_ptr<PostTestClientByTestIdWait_for_device_messages_request> postTestClientByTestIdWaitForDeviceMessagesRequest
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    pplx::task<std::shared_ptr<Object>> postTestDeviceByTestIdDisconnectDevice(
        utility::string_t testId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    pplx::task<std::shared_ptr<Object>> postTestDeviceByTestIdDropDeviceMessages(
        utility::string_t testId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="testId"></param>
    pplx::task<std::shared_ptr<Object>> postTestDeviceByTestIdSendNewMessageType(
        utility::string_t testId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="postV1ClientConnectRequest"></param>
    pplx::task<std::shared_ptr<PostV1ClientConnect_200_response>> postV1ClientConnect(
        std::shared_ptr<PostV1ClientConnect_request> postV1ClientConnectRequest
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="authorization"></param>
    /// <param name="postV1ClientConnectRequest"></param>
    pplx::task<std::shared_ptr<PostV1DeviceConnect_200_response>> postV1DeviceConnect(
        utility::string_t authorization,
        std::shared_ptr<PostV1ClientConnect_request> postV1ClientConnectRequest
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_ */

