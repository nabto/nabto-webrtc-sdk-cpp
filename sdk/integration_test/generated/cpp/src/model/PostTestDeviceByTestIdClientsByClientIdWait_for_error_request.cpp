/**
 * Elysia Documentation
 * Development documentation
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PostTestDeviceByTestIdClientsByClientIdWait_for_error_request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

PostTestDeviceByTestIdClientsByClientIdWait_for_error_request::PostTestDeviceByTestIdClientsByClientIdWait_for_error_request()
{
    m_Timeout = 0.0;
    m_TimeoutIsSet = false;
}

PostTestDeviceByTestIdClientsByClientIdWait_for_error_request::~PostTestDeviceByTestIdClientsByClientIdWait_for_error_request()
{
}

void PostTestDeviceByTestIdClientsByClientIdWait_for_error_request::validate()
{
    // TODO: implement validation
}

web::json::value PostTestDeviceByTestIdClientsByClientIdWait_for_error_request::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_TimeoutIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timeout"))] = ModelBase::toJson(m_Timeout);
    }

    return val;
}

bool PostTestDeviceByTestIdClientsByClientIdWait_for_error_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timeout"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timeout")));
        if(!fieldValue.is_null())
        {
            double refVal_setTimeout;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeout);
            setTimeout(refVal_setTimeout);
            
        }
    }
    return ok;
}

void PostTestDeviceByTestIdClientsByClientIdWait_for_error_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_TimeoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timeout")), m_Timeout));
    }
}

bool PostTestDeviceByTestIdClientsByClientIdWait_for_error_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timeout"))))
    {
        double refVal_setTimeout;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timeout"))), refVal_setTimeout );
        setTimeout(refVal_setTimeout);
    }
    return ok;
}


double PostTestDeviceByTestIdClientsByClientIdWait_for_error_request::getTimeout() const
{
    return m_Timeout;
}

void PostTestDeviceByTestIdClientsByClientIdWait_for_error_request::setTimeout(double value)
{
    m_Timeout = value;
    m_TimeoutIsSet = true;
}

bool PostTestDeviceByTestIdClientsByClientIdWait_for_error_request::timeoutIsSet() const
{
    return m_TimeoutIsSet;
}

void PostTestDeviceByTestIdClientsByClientIdWait_for_error_request::unsetTimeout()
{
    m_TimeoutIsSet = false;
}

}
}
}
}


