/**
 * Elysia Documentation
 * Development documentation
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PostTestDevice_200_response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

PostTestDevice_200_response::PostTestDevice_200_response()
{
    m_ProductId = utility::conversions::to_string_t("");
    m_ProductIdIsSet = false;
    m_DeviceId = utility::conversions::to_string_t("");
    m_DeviceIdIsSet = false;
    m_EndpointUrl = utility::conversions::to_string_t("");
    m_EndpointUrlIsSet = false;
    m_TestId = utility::conversions::to_string_t("");
    m_TestIdIsSet = false;
    m_AccessToken = utility::conversions::to_string_t("");
    m_AccessTokenIsSet = false;
}

PostTestDevice_200_response::~PostTestDevice_200_response()
{
}

void PostTestDevice_200_response::validate()
{
    // TODO: implement validation
}

web::json::value PostTestDevice_200_response::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_ProductIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("productId"))] = ModelBase::toJson(m_ProductId);
    }
    if(m_DeviceIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("deviceId"))] = ModelBase::toJson(m_DeviceId);
    }
    if(m_EndpointUrlIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("endpointUrl"))] = ModelBase::toJson(m_EndpointUrl);
    }
    if(m_TestIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("testId"))] = ModelBase::toJson(m_TestId);
    }
    if(m_AccessTokenIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("accessToken"))] = ModelBase::toJson(m_AccessToken);
    }

    return val;
}

bool PostTestDevice_200_response::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("productId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("productId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductId);
            setProductId(refVal_setProductId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("deviceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("deviceId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeviceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceId);
            setDeviceId(refVal_setDeviceId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("endpointUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("endpointUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEndpointUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndpointUrl);
            setEndpointUrl(refVal_setEndpointUrl);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("testId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("testId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTestId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTestId);
            setTestId(refVal_setTestId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("accessToken"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("accessToken")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccessToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccessToken);
            setAccessToken(refVal_setAccessToken);
            
        }
    }
    return ok;
}

void PostTestDevice_200_response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_ProductIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("productId")), m_ProductId));
    }
    if(m_DeviceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("deviceId")), m_DeviceId));
    }
    if(m_EndpointUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("endpointUrl")), m_EndpointUrl));
    }
    if(m_TestIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("testId")), m_TestId));
    }
    if(m_AccessTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("accessToken")), m_AccessToken));
    }
}

bool PostTestDevice_200_response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("productId"))))
    {
        utility::string_t refVal_setProductId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("productId"))), refVal_setProductId );
        setProductId(refVal_setProductId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("deviceId"))))
    {
        utility::string_t refVal_setDeviceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("deviceId"))), refVal_setDeviceId );
        setDeviceId(refVal_setDeviceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("endpointUrl"))))
    {
        utility::string_t refVal_setEndpointUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("endpointUrl"))), refVal_setEndpointUrl );
        setEndpointUrl(refVal_setEndpointUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("testId"))))
    {
        utility::string_t refVal_setTestId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("testId"))), refVal_setTestId );
        setTestId(refVal_setTestId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("accessToken"))))
    {
        utility::string_t refVal_setAccessToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("accessToken"))), refVal_setAccessToken );
        setAccessToken(refVal_setAccessToken);
    }
    return ok;
}


utility::string_t PostTestDevice_200_response::getProductId() const
{
    return m_ProductId;
}


void PostTestDevice_200_response::setProductId(const utility::string_t& value)
{
    m_ProductId = value;
    m_ProductIdIsSet = true;
}

bool PostTestDevice_200_response::productIdIsSet() const
{
    return m_ProductIdIsSet;
}

void PostTestDevice_200_response::unsetProductId()
{
    m_ProductIdIsSet = false;
}
utility::string_t PostTestDevice_200_response::getDeviceId() const
{
    return m_DeviceId;
}


void PostTestDevice_200_response::setDeviceId(const utility::string_t& value)
{
    m_DeviceId = value;
    m_DeviceIdIsSet = true;
}

bool PostTestDevice_200_response::deviceIdIsSet() const
{
    return m_DeviceIdIsSet;
}

void PostTestDevice_200_response::unsetDeviceId()
{
    m_DeviceIdIsSet = false;
}
utility::string_t PostTestDevice_200_response::getEndpointUrl() const
{
    return m_EndpointUrl;
}


void PostTestDevice_200_response::setEndpointUrl(const utility::string_t& value)
{
    m_EndpointUrl = value;
    m_EndpointUrlIsSet = true;
}

bool PostTestDevice_200_response::endpointUrlIsSet() const
{
    return m_EndpointUrlIsSet;
}

void PostTestDevice_200_response::unsetEndpointUrl()
{
    m_EndpointUrlIsSet = false;
}
utility::string_t PostTestDevice_200_response::getTestId() const
{
    return m_TestId;
}


void PostTestDevice_200_response::setTestId(const utility::string_t& value)
{
    m_TestId = value;
    m_TestIdIsSet = true;
}

bool PostTestDevice_200_response::testIdIsSet() const
{
    return m_TestIdIsSet;
}

void PostTestDevice_200_response::unsetTestId()
{
    m_TestIdIsSet = false;
}
utility::string_t PostTestDevice_200_response::getAccessToken() const
{
    return m_AccessToken;
}


void PostTestDevice_200_response::setAccessToken(const utility::string_t& value)
{
    m_AccessToken = value;
    m_AccessTokenIsSet = true;
}

bool PostTestDevice_200_response::accessTokenIsSet() const
{
    return m_AccessTokenIsSet;
}

void PostTestDevice_200_response::unsetAccessToken()
{
    m_AccessTokenIsSet = false;
}

}
}
}
}


