/**
 * Elysia Documentation
 * Development documentation
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PostV1ClientConnect_200_response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

PostV1ClientConnect_200_response::PostV1ClientConnect_200_response()
{
    m_SignalingUrl = utility::conversions::to_string_t("");
    m_SignalingUrlIsSet = false;
    m_DeviceOnline = false;
    m_DeviceOnlineIsSet = false;
    m_ChannelId = utility::conversions::to_string_t("");
    m_ChannelIdIsSet = false;
    m_Extra_field_in_the_response = utility::conversions::to_string_t("");
    m_Extra_field_in_the_responseIsSet = false;
}

PostV1ClientConnect_200_response::~PostV1ClientConnect_200_response()
{
}

void PostV1ClientConnect_200_response::validate()
{
    // TODO: implement validation
}

web::json::value PostV1ClientConnect_200_response::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SignalingUrlIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("signalingUrl"))] = ModelBase::toJson(m_SignalingUrl);
    }
    if(m_DeviceOnlineIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("deviceOnline"))] = ModelBase::toJson(m_DeviceOnline);
    }
    if(m_ChannelIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("channelId"))] = ModelBase::toJson(m_ChannelId);
    }
    if(m_Extra_field_in_the_responseIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("extra_field_in_the_response"))] = ModelBase::toJson(m_Extra_field_in_the_response);
    }

    return val;
}

bool PostV1ClientConnect_200_response::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("signalingUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("signalingUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSignalingUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSignalingUrl);
            setSignalingUrl(refVal_setSignalingUrl);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("deviceOnline"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("deviceOnline")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDeviceOnline;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceOnline);
            setDeviceOnline(refVal_setDeviceOnline);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("channelId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("channelId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChannelId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChannelId);
            setChannelId(refVal_setChannelId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("extra_field_in_the_response"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("extra_field_in_the_response")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExtraFieldInTheResponse;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExtraFieldInTheResponse);
            setExtraFieldInTheResponse(refVal_setExtraFieldInTheResponse);
            
        }
    }
    return ok;
}

void PostV1ClientConnect_200_response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SignalingUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("signalingUrl")), m_SignalingUrl));
    }
    if(m_DeviceOnlineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("deviceOnline")), m_DeviceOnline));
    }
    if(m_ChannelIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("channelId")), m_ChannelId));
    }
    if(m_Extra_field_in_the_responseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("extra_field_in_the_response")), m_Extra_field_in_the_response));
    }
}

bool PostV1ClientConnect_200_response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("signalingUrl"))))
    {
        utility::string_t refVal_setSignalingUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("signalingUrl"))), refVal_setSignalingUrl );
        setSignalingUrl(refVal_setSignalingUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("deviceOnline"))))
    {
        bool refVal_setDeviceOnline;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("deviceOnline"))), refVal_setDeviceOnline );
        setDeviceOnline(refVal_setDeviceOnline);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("channelId"))))
    {
        utility::string_t refVal_setChannelId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("channelId"))), refVal_setChannelId );
        setChannelId(refVal_setChannelId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("extra_field_in_the_response"))))
    {
        utility::string_t refVal_setExtraFieldInTheResponse;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("extra_field_in_the_response"))), refVal_setExtraFieldInTheResponse );
        setExtraFieldInTheResponse(refVal_setExtraFieldInTheResponse);
    }
    return ok;
}


utility::string_t PostV1ClientConnect_200_response::getSignalingUrl() const
{
    return m_SignalingUrl;
}


void PostV1ClientConnect_200_response::setSignalingUrl(const utility::string_t& value)
{
    m_SignalingUrl = value;
    m_SignalingUrlIsSet = true;
}

bool PostV1ClientConnect_200_response::signalingUrlIsSet() const
{
    return m_SignalingUrlIsSet;
}

void PostV1ClientConnect_200_response::unsetSignalingUrl()
{
    m_SignalingUrlIsSet = false;
}
bool PostV1ClientConnect_200_response::isDeviceOnline() const
{
    return m_DeviceOnline;
}

void PostV1ClientConnect_200_response::setDeviceOnline(bool value)
{
    m_DeviceOnline = value;
    m_DeviceOnlineIsSet = true;
}

bool PostV1ClientConnect_200_response::deviceOnlineIsSet() const
{
    return m_DeviceOnlineIsSet;
}

void PostV1ClientConnect_200_response::unsetDeviceOnline()
{
    m_DeviceOnlineIsSet = false;
}
utility::string_t PostV1ClientConnect_200_response::getChannelId() const
{
    return m_ChannelId;
}


void PostV1ClientConnect_200_response::setChannelId(const utility::string_t& value)
{
    m_ChannelId = value;
    m_ChannelIdIsSet = true;
}

bool PostV1ClientConnect_200_response::channelIdIsSet() const
{
    return m_ChannelIdIsSet;
}

void PostV1ClientConnect_200_response::unsetChannelId()
{
    m_ChannelIdIsSet = false;
}
utility::string_t PostV1ClientConnect_200_response::getExtraFieldInTheResponse() const
{
    return m_Extra_field_in_the_response;
}


void PostV1ClientConnect_200_response::setExtraFieldInTheResponse(const utility::string_t& value)
{
    m_Extra_field_in_the_response = value;
    m_Extra_field_in_the_responseIsSet = true;
}

bool PostV1ClientConnect_200_response::extraFieldInTheResponseIsSet() const
{
    return m_Extra_field_in_the_responseIsSet;
}

void PostV1ClientConnect_200_response::unsetExtra_field_in_the_response()
{
    m_Extra_field_in_the_responseIsSet = false;
}

}
}
}
}


