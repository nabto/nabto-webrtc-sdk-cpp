/**
 * Elysia Documentation
 * Development documentation
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PostTestDeviceByTestIdClients_200_response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PostTestDeviceByTestIdClients_200_response::PostTestDeviceByTestIdClients_200_response()
{
    m_ClientId = utility::conversions::to_string_t("");
    m_ClientIdIsSet = false;
}

PostTestDeviceByTestIdClients_200_response::~PostTestDeviceByTestIdClients_200_response()
{
}

void PostTestDeviceByTestIdClients_200_response::validate()
{
    // TODO: implement validation
}

web::json::value PostTestDeviceByTestIdClients_200_response::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ClientIdIsSet)
    {
        val[utility::conversions::to_string_t(U("clientId"))] = ModelBase::toJson(m_ClientId);
    }

    return val;
}

bool PostTestDeviceByTestIdClients_200_response::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("clientId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("clientId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientId);
            setClientId(refVal_setClientId);
        }
    }
    return ok;
}

void PostTestDeviceByTestIdClients_200_response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ClientIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("clientId")), m_ClientId));
    }
}

bool PostTestDeviceByTestIdClients_200_response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("clientId"))))
    {
        utility::string_t refVal_setClientId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("clientId"))), refVal_setClientId );
        setClientId(refVal_setClientId);
    }
    return ok;
}

utility::string_t PostTestDeviceByTestIdClients_200_response::getClientId() const
{
    return m_ClientId;
}

void PostTestDeviceByTestIdClients_200_response::setClientId(const utility::string_t& value)
{
    m_ClientId = value;
    m_ClientIdIsSet = true;
}

bool PostTestDeviceByTestIdClients_200_response::clientIdIsSet() const
{
    return m_ClientIdIsSet;
}

void PostTestDeviceByTestIdClients_200_response::unsetClientId()
{
    m_ClientIdIsSet = false;
}
}
}
}
}


