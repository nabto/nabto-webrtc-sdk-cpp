/**
 * Elysia Documentation
 * Development documentation
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PostTestClientByTestIdWait_for_device_messages_200_response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

PostTestClientByTestIdWait_for_device_messages_200_response::PostTestClientByTestIdWait_for_device_messages_200_response()
{
    m_MessagesIsSet = false;
}

PostTestClientByTestIdWait_for_device_messages_200_response::~PostTestClientByTestIdWait_for_device_messages_200_response()
{
}

void PostTestClientByTestIdWait_for_device_messages_200_response::validate()
{
    // TODO: implement validation
}

web::json::value PostTestClientByTestIdWait_for_device_messages_200_response::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_MessagesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("messages"))] = ModelBase::toJson(m_Messages);
    }

    return val;
}

bool PostTestClientByTestIdWait_for_device_messages_200_response::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("messages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("messages")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AnyType>> refVal_setMessages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessages);
            setMessages(refVal_setMessages);
            
        }
    }
    return ok;
}

void PostTestClientByTestIdWait_for_device_messages_200_response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_MessagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("messages")), m_Messages));
    }
}

bool PostTestClientByTestIdWait_for_device_messages_200_response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("messages"))))
    {
        std::vector<std::shared_ptr<AnyType>> refVal_setMessages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("messages"))), refVal_setMessages );
        setMessages(refVal_setMessages);
    }
    return ok;
}


std::vector<std::shared_ptr<AnyType>> PostTestClientByTestIdWait_for_device_messages_200_response::getMessages() const
{
    return m_Messages;
}


void PostTestClientByTestIdWait_for_device_messages_200_response::setMessages(const std::vector<std::shared_ptr<AnyType>>& value)
{
    m_Messages = value;
    m_MessagesIsSet = true;
}

bool PostTestClientByTestIdWait_for_device_messages_200_response::messagesIsSet() const
{
    return m_MessagesIsSet;
}

void PostTestClientByTestIdWait_for_device_messages_200_response::unsetMessages()
{
    m_MessagesIsSet = false;
}

}
}
}
}


