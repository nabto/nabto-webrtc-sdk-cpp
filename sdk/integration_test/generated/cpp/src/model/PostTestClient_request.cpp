/**
 * Elysia Documentation
 * Development documentation
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PostTestClient_request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PostTestClient_request::PostTestClient_request()
{
    m_FailHttp = false;
    m_FailHttpIsSet = false;
    m_FailWs = false;
    m_FailWsIsSet = false;
    m_ExtraClientConnectResponseData = false;
    m_ExtraClientConnectResponseDataIsSet = false;
}

PostTestClient_request::~PostTestClient_request()
{
}

void PostTestClient_request::validate()
{
    // TODO: implement validation
}

web::json::value PostTestClient_request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FailHttpIsSet)
    {
        val[utility::conversions::to_string_t(U("failHttp"))] = ModelBase::toJson(m_FailHttp);
    }
    if(m_FailWsIsSet)
    {
        val[utility::conversions::to_string_t(U("failWs"))] = ModelBase::toJson(m_FailWs);
    }
    if(m_ExtraClientConnectResponseDataIsSet)
    {
        val[utility::conversions::to_string_t(U("extraClientConnectResponseData"))] = ModelBase::toJson(m_ExtraClientConnectResponseData);
    }

    return val;
}

bool PostTestClient_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("failHttp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("failHttp")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFailHttp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFailHttp);
            setFailHttp(refVal_setFailHttp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("failWs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("failWs")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFailWs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFailWs);
            setFailWs(refVal_setFailWs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("extraClientConnectResponseData"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("extraClientConnectResponseData")));
        if(!fieldValue.is_null())
        {
            bool refVal_setExtraClientConnectResponseData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExtraClientConnectResponseData);
            setExtraClientConnectResponseData(refVal_setExtraClientConnectResponseData);
        }
    }
    return ok;
}

void PostTestClient_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FailHttpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("failHttp")), m_FailHttp));
    }
    if(m_FailWsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("failWs")), m_FailWs));
    }
    if(m_ExtraClientConnectResponseDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("extraClientConnectResponseData")), m_ExtraClientConnectResponseData));
    }
}

bool PostTestClient_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("failHttp"))))
    {
        bool refVal_setFailHttp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("failHttp"))), refVal_setFailHttp );
        setFailHttp(refVal_setFailHttp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("failWs"))))
    {
        bool refVal_setFailWs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("failWs"))), refVal_setFailWs );
        setFailWs(refVal_setFailWs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("extraClientConnectResponseData"))))
    {
        bool refVal_setExtraClientConnectResponseData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("extraClientConnectResponseData"))), refVal_setExtraClientConnectResponseData );
        setExtraClientConnectResponseData(refVal_setExtraClientConnectResponseData);
    }
    return ok;
}

bool PostTestClient_request::isFailHttp() const
{
    return m_FailHttp;
}

void PostTestClient_request::setFailHttp(bool value)
{
    m_FailHttp = value;
    m_FailHttpIsSet = true;
}

bool PostTestClient_request::failHttpIsSet() const
{
    return m_FailHttpIsSet;
}

void PostTestClient_request::unsetFailHttp()
{
    m_FailHttpIsSet = false;
}
bool PostTestClient_request::isFailWs() const
{
    return m_FailWs;
}

void PostTestClient_request::setFailWs(bool value)
{
    m_FailWs = value;
    m_FailWsIsSet = true;
}

bool PostTestClient_request::failWsIsSet() const
{
    return m_FailWsIsSet;
}

void PostTestClient_request::unsetFailWs()
{
    m_FailWsIsSet = false;
}
bool PostTestClient_request::isExtraClientConnectResponseData() const
{
    return m_ExtraClientConnectResponseData;
}

void PostTestClient_request::setExtraClientConnectResponseData(bool value)
{
    m_ExtraClientConnectResponseData = value;
    m_ExtraClientConnectResponseDataIsSet = true;
}

bool PostTestClient_request::extraClientConnectResponseDataIsSet() const
{
    return m_ExtraClientConnectResponseDataIsSet;
}

void PostTestClient_request::unsetExtraClientConnectResponseData()
{
    m_ExtraClientConnectResponseDataIsSet = false;
}
}
}
}
}


