/**
 * Elysia Documentation
 * Development documentation
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PostTestClientByTestIdWait_for_device_messages_request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PostTestClientByTestIdWait_for_device_messages_request::PostTestClientByTestIdWait_for_device_messages_request()
{
    m_MessagesIsSet = false;
    m_Timeout = 0.0;
    m_TimeoutIsSet = false;
}

PostTestClientByTestIdWait_for_device_messages_request::~PostTestClientByTestIdWait_for_device_messages_request()
{
}

void PostTestClientByTestIdWait_for_device_messages_request::validate()
{
    // TODO: implement validation
}

web::json::value PostTestClientByTestIdWait_for_device_messages_request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MessagesIsSet)
    {
        val[utility::conversions::to_string_t(U("messages"))] = ModelBase::toJson(m_Messages);
    }
    if(m_TimeoutIsSet)
    {
        val[utility::conversions::to_string_t(U("timeout"))] = ModelBase::toJson(m_Timeout);
    }

    return val;
}

bool PostTestClientByTestIdWait_for_device_messages_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("messages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("messages")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setMessages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessages);
            setMessages(refVal_setMessages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timeout"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timeout")));
        if(!fieldValue.is_null())
        {
            double refVal_setTimeout;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeout);
            setTimeout(refVal_setTimeout);
        }
    }
    return ok;
}

void PostTestClientByTestIdWait_for_device_messages_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MessagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("messages")), m_Messages));
    }
    if(m_TimeoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timeout")), m_Timeout));
    }
}

bool PostTestClientByTestIdWait_for_device_messages_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("messages"))))
    {
        std::vector<utility::string_t> refVal_setMessages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("messages"))), refVal_setMessages );
        setMessages(refVal_setMessages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timeout"))))
    {
        double refVal_setTimeout;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timeout"))), refVal_setTimeout );
        setTimeout(refVal_setTimeout);
    }
    return ok;
}

std::vector<utility::string_t>& PostTestClientByTestIdWait_for_device_messages_request::getMessages()
{
    return m_Messages;
}

void PostTestClientByTestIdWait_for_device_messages_request::setMessages(const std::vector<utility::string_t>& value)
{
    m_Messages = value;
    m_MessagesIsSet = true;
}

bool PostTestClientByTestIdWait_for_device_messages_request::messagesIsSet() const
{
    return m_MessagesIsSet;
}

void PostTestClientByTestIdWait_for_device_messages_request::unsetMessages()
{
    m_MessagesIsSet = false;
}
double PostTestClientByTestIdWait_for_device_messages_request::getTimeout() const
{
    return m_Timeout;
}

void PostTestClientByTestIdWait_for_device_messages_request::setTimeout(double value)
{
    m_Timeout = value;
    m_TimeoutIsSet = true;
}

bool PostTestClientByTestIdWait_for_device_messages_request::timeoutIsSet() const
{
    return m_TimeoutIsSet;
}

void PostTestClientByTestIdWait_for_device_messages_request::unsetTimeout()
{
    m_TimeoutIsSet = false;
}
}
}
}
}


